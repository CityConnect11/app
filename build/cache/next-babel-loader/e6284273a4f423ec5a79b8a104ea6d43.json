{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _leaflet = require(\"leaflet\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _context = require(\"./context\");\n\nvar _MapLayer2 = _interopRequireDefault(require(\"./MapLayer\"));\n\nvar Marker = /*#__PURE__*/function (_MapLayer) {\n  (0, _inheritsLoose2.default)(Marker, _MapLayer);\n\n  function Marker() {\n    return _MapLayer.apply(this, arguments) || this;\n  }\n\n  var _proto = Marker.prototype;\n\n  _proto.createLeafletElement = function createLeafletElement(props) {\n    var el = new _leaflet.Marker(props.position, this.getOptions(props));\n    this.contextValue = (0, _extends2.default)({}, props.leaflet, {\n      popupContainer: el\n    });\n    return el;\n  };\n\n  _proto.updateLeafletElement = function updateLeafletElement(fromProps, toProps) {\n    if (toProps.position !== fromProps.position) {\n      this.leafletElement.setLatLng(toProps.position);\n    }\n\n    if (toProps.icon !== fromProps.icon) {\n      this.leafletElement.setIcon(toProps.icon);\n    }\n\n    if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n      this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\n    }\n\n    if (toProps.opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(toProps.opacity);\n    }\n\n    if (toProps.draggable !== fromProps.draggable) {\n      if (toProps.draggable === true) {\n        this.leafletElement.dragging.enable();\n      } else {\n        this.leafletElement.dragging.disable();\n      }\n    }\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children == null || this.contextValue == null ? null : _react.default.createElement(_context.LeafletProvider, {\n      value: this.contextValue\n    }, children);\n  };\n\n  return Marker;\n}(_MapLayer2.default);\n\nvar _default = (0, _context.withLeaflet)(Marker);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}